name: test

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Start Selenoid
        uses: Xotabu4/selenoid-github-action@v2

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew clean test -Dselenide.remote=http://localhost:4444/wd/hub

      - name: Get Allure history
        if: always()
        continue-on-error: true
        uses: actions/checkout@v2
        with:
          ref: gh-pages
          path: gh-pages

      - name: Generate Allure report
        if: always()
        uses: simple-elf/allure-report-action@master
        with:
          allure_results: build/allure-results
          allure_report: allure-report
          allure_history: allure-history
          gh_pages: gh-pages

      - name: Debug directory structure
        if: always()
        run: |
          echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–Ω—è:"
          ls -la
          echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ build/:"
          ls -la build || true
          echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ allure-report/:"
          ls -la allure-report || true

      - name: Deploy Allure report to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: allure-history
          publish_branch: gh-pages

      # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±: —á–∏—Ç–∞–µ–º –∏—Ç–æ–≥ –∏–∑ summary.json
      - name: Add summary for test results (from Allure)
        if: always()
        run: |
          file="allure-report/widgets/summary.json"
          passed=$(jq '.statistic.passed' $file)
          failed=$(jq '.statistic.failed' $file)
          echo "### ‚úÖ Passed: $passed" >> $GITHUB_STEP_SUMMARY
          echo "### ‚ùå Failed: $failed" >> $GITHUB_STEP_SUMMARY

      - name: Download Allure Notifications Jar
        run: |
          mkdir -p notifications
          curl -L --retry 5 --retry-delay 2 \
               -o notifications/allure-notifications.jar \
               https://github.com/qa-guru/allure-notifications/releases/download/4.7.0/allure-notifications-4.7.0.jar

      - name: Debug JAR file
        if: always()
        run: |
          echo "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è JAR:"
          ls -la notifications

      - name: Debug Allure folder contents
        if: always()
        run: |
          echo "üóÇÔ∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ allure-report:"
          ls -la allure-report
          echo "üóÇÔ∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ widgets:"
          ls -la allure-report/widgets || true
          echo "üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ summary.json:"
          cat allure-report/widgets/summary.json || true

      - name: Send Telegram Notification
        if: always()
        run: |
          java "-DconfigFile=notifications/config.json" \
               "-Dnotifications.base.reportLink=https://sentidas.github.io/UI_API_java_demoQA" \
               "-Dnotifications.telegram.token=${{ secrets.TELEGRAM_TOKEN }}" \
               "-Dnotifications.telegram.chat=${{ secrets.TELEGRAM_CHAT_ID }}" \
               -jar notifications/allure-notifications.jar
